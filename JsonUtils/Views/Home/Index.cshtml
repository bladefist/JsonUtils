@model Core.ViewModels.IndexViewModel
@{
    ViewBag.Title = "Index";

    string codeeditorclass = "csharp";
    
    if (Model.Language == 2)
    {
        codeeditorclass = "vb";
    }
    else if (Model.Language == 3)
    {
        codeeditorclass = "javascript";
    }
}

@if (Model.Error)
{
<div class="alert alert-dismissable alert-danger">
    <button type="button" class="close" data-dismiss="alert">×</button>
    @if (Model.ErrorNo == 1)
    {
        <text>Class Name is Required</text>
    }
    else if (Model.ErrorNo == 2)
    {
        <text>JSON or a valid URL is required</text>
    }
    else if (Model.ErrorNo == 3)
    {
        <text>Invalid JSON Syntax</text>
    }
    else if (Model.ErrorNo == 4)
    {
        <text>Invalid URL. Unable to download JSON data or URL is not valid JSON</text>
    }
    else if (Model.ErrorNo == 5)
    {
        <text>JSON contains a Keyword for the choosen langauge</text>
    }
</div>
}

<link rel="stylesheet" type="text/css" href="/Content/jsoneditor/jsoneditor-min.css">

<div class="row">
    <div class="col-md-12">

        <div class="alert alert-success">
            <h4>Contribute!</h4>
            <p>
                Like Json Utils? Want to expand it? Fix bugs? Now Open Source and accepting pull-requests! <a href="https://github.com/bladefist/JsonUtils">The Sauce</a>
            </p>
        </div>

        <form class="form form-horizontal" action="/" method="post">

        <h1 class="hide-h1">Generate classes from JSON - Json to C#, Json to VB.net, and JSON Viewer</h1>
        <div class="control-group">
            <label class="control-label">Language of classes to generate</label>
            <div class="col-md-12" id="languages">
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 1, Model.Language == 1)
                        C#
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 2, Model.Language == 2)
                        VB.Net
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 3, Model.Language == 3)
                        Javascript
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 4, Model.Language == 4)
                        SQL Table
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 5, Model.Language == 5)
                        Java
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 6, Model.Language == 6)
                        PHP
                    </label>
                </div>
                <div class="radio-inline">
                    <label>
                        @Html.RadioButton("Language", 7, Model.Language == 7)
                        TypeScript
                    </label>
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-4">
                <div class="control-group">
                    <label class="control-label">Class Name</label>
                    <div class="controls">
                        @Html.TextBoxFor(m => m.ClassName, new { placeholder = "Class Name", @class = "form-control" })                        
                    </div>
                </div>
            </div>
            <div class="col-md-4">
                <div class="control-group">
                    <label class="control-label"></label>
                    <div class="col-md-12">
                        <div class="check-inline">
                            <label>
                                @Html.CheckBox("Nest", Model.Nest)
                                Add Namespace
                            </label>
                        </div>
                        <div class="check-inline">
                            <label>
                                @Html.CheckBox("Pascal", Model.Pascal)
                                Pascal Case
                            </label>
                        </div>
                        <div class="check-inline" id="div-properties">
                            <label>
                                @Html.CheckBox("Properties", Model.Properties)
                                Get &amp; Set
                            </label>
                        </div>
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label">Namespace</label>
                    <div class="col-md-12">
                        @Html.TextBoxFor(m => m.Namespace, new {placeholder = "Namespace", @class = "form-control"})
                    </div>
                </div>
                <div class="control-group">
                    <label class="control-label">Property Attributes</label>
                    <div class="col-md-12">
                        @Html.DropDownListFor(m => m.PropertyAttribute, Model.PropertyAttributeOptions, new { @class = "form-control" })
                    </div>
                </div>
            </div>            
        </div>

        <div class="control-group">
            <label class="control-label">JSON Text or URL</label>
            <div class="controls">
                @Html.TextAreaFor(m => m.JSON, new { @class = "form-control", rows = 5 })
            </div>
        </div>


        <div class="control-group">
            <label class="control-label"></label>
            <div class="controls">
                <button type="submit" class="btn btn-primary">Submit</button>
            </div>
        </div>

        </form>
    </div>
</div>

<div style="height: 20px"></div>

<a name="result"></a>

@if (!string.IsNullOrEmpty(Model.CodeObjects))
{
    <div class="row">
        <div class="col-md-12">
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">JSON Utilities</h3>
                    <span class="pull-right">
                        <!-- Tabs -->
                        <ul class="nav panel-tabs">
                            <li class="active"><a href="#jsonobjects" data-toggle="tab">Class Objects</a></li>
                            <li><a href="#jsoneditor" data-toggle="tab">Viewer</a></li>
                            <li><a href="#jsonbeautiful" data-toggle="tab">Beautified</a></li>
                            <li id="copy-content" class="copier"
                                data-toggle="popover" data-trigger="manual"
                                data-placement="bottom"
                                data-content="Generated code has been copied to your clipboard."></li>
                        </ul>
                    </span>
                </div>
                <div class="panel-body">
                    <div class="tab-content">
                        <div class="tab-pane active" id="jsonobjects">
                            <pre class="sunlight-highlight-@codeeditorclass">@Html.Raw(Model.CodeObjects)</pre>
                        </div>
                        <div class="tab-pane" id="jsoneditor">
                        </div>
                        <div class="tab-pane" id="jsonbeautiful">
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>  
    
    <div id="json-text" style="display:none;">
        @Model.JSON
    </div>
}

<script type="text/javascript" src="/Content/SunLight/sunlight-min.js"></script>
<script type="text/javascript" src="/Content/SunLight/sunlight-all-min.js"></script>

<script type="text/javascript" src="/Content/jsoneditor/jsoneditor-min.js"></script>

<script type="text/javascript">

    @if (Model.Language == 3)
    {
        <text>    
            $('#jsonobjects > pre').text('var myObject = ' + JSON.stringify(JSON.parse($('#json-text').text()), null, "\t") + ';');
        </text>
    }

    Sunlight.highlightAll();

    var container = document.getElementById("jsoneditor");
    var options = {
        mode: 'tree'
    };
    var editor = new jsoneditor.JSONEditor(container, options);

    var obj = JSON.parse($('#json-text').text());
    editor.set(obj);

    editor.expandAll();


    var beautifulBox = document.getElementById("jsonbeautiful");
    var options2 = {
        mode: 'text',
        indentation: 2
    };
    var viewer = new jsoneditor.JSONEditor(beautifulBox, options2);
    viewer.set(obj);

    $('#jsonbeautiful').height($('#jsoneditor').height());

    var copier = $('#copy-content');

    function disableAttributes(languageId) {
        resetAttributes();
        try {
            languageId = parseInt(languageId);
        } catch (e) {
            languageId = 0;
        }
        switch (languageId) {
            case 3: //Javascript
                $('#ClassName').attr('disabled', 'disabled');
                $('#Nest').attr('disabled', 'disabled');
                $('#Namespace').attr('disabled', 'disabled');
                $('#Pascal').attr('disabled', 'disabled');
                $('#PropertyAttribute').attr('disabled', 'disabled');
            break;
            case 4: //Sql
                $('#Nest').attr('disabled', 'disabled');
                $('#Namespace').attr('disabled', 'disabled');
                $('#PropertyAttribute').attr('disabled', 'disabled');
            break;
            case 5: //Java
                $('#Nest').attr('disabled', 'disabled');
                $('#Namespace').attr('disabled', 'disabled');
                $('#Pascal').attr('disabled', 'disabled');
                $('#PropertyAttribute').attr('disabled', 'disabled');
                $("#div-properties").show();
                break;
            case 6: //PHP
                $('#Nest').attr('disabled', 'disabled');
                $('#Namespace').attr('disabled', 'disabled');
                $('#Pascal').attr('disabled', 'disabled');
                $('#PropertyAttribute').attr('disabled', 'disabled');
                $("#div-properties").show();
                break;
            case 7: //TypeScript
                $('#Pascal').attr('disabled', 'disabled');
                $('#PropertyAttribute').attr('disabled', 'disabled');
                break;
            default:
                
        }
    }

    function toggleNamespace(checked) {
        if (checked) {
            $('#Namespace').removeAttr('disabled');
        }
        else
            $('#Namespace').attr('disabled', 'disabled');;
    }

    function resetAttributes() {
        $('#ClassName').removeAttr('disabled');
        $('#Nest').removeAttr('disabled');
        $('#Pascal').removeAttr('disabled');
        $('#PropertyAttribute').removeAttr('disabled');
        $("#div-properties").hide();
    }

    function copyTextToClipboard(text) {
        // http://stackoverflow.com/a/30810322/9664

        var textArea = document.createElement("textarea");

        // *** This styling is an extra step which is likely not required. ***
        //
        // Why is it here? To ensure:
        // 1. the element is able to have focus and selection.
        // 2. if element was to flash render it has minimal visual impact.
        // 3. less flakyness with selection and copying which **might** occur if
        //    the textarea element is not visible.
        //
        // The likelihood is the element won't even render, not even a flash,
        // so some of these are just precautions. However in IE the element
        // is visible whilst the popup box asking the user for permission for
        // the web page to copy to the clipboard.

        // Place in top-left corner of screen regardless of scroll position.
        textArea.style.position = 'fixed';
        textArea.style.top = 0;
        textArea.style.left = 0;

        // Ensure it has a small width and height. Setting to 1px / 1em
        // doesn't work as this gives a negative w/h on some browsers.
        textArea.style.width = '2em';
        textArea.style.height = '2em';

        // We don't need padding, reducing the size if it does flash render.
        textArea.style.padding = 0;

        // Clean up any borders.
        textArea.style.border = 'none';
        textArea.style.outline = 'none';
        textArea.style.boxShadow = 'none';

        // Avoid flash of white box if rendered for any reason.
        textArea.style.background = 'transparent';

        textArea.value = text;

        document.body.appendChild(textArea);

        textArea.select();

        try {
            var successful = document.execCommand('copy');
            if (successful) {
                copier.popover('show');
                setTimeout(function () {
                    copier.popover('hide');
                }, 3000);
            }
        } catch (err) {
            alert('Unable to copy the generated code to your clipboard.');
        }

        document.body.removeChild(textArea);
    }


    $(document).ready(function () {
        //Language radio button type click
        $("#languages input[name='Language']").click(function () {
            var selectedValue = $('input:radio[name=Language]:checked').val();
            disableAttributes(selectedValue);
        });

        $("#Nest").click(function () {
            var namespaceCheck = $('#Nest').is(':checked');
            toggleNamespace(namespaceCheck);
        });

        //Enable/Disable on ready
        var selectedValue = $('input:radio[name=Language]:checked').val();
        disableAttributes(selectedValue);

        //Namespace Enable/Disable
        var namespaceCheck = $('#Nest').is(':checked');
        toggleNamespace(namespaceCheck);

        //Attach event to copy contents of the sunlight editor to the clipboard
        var copierTitle = 'copy the generated code to your clipboard';
        copier.attr('title', copierTitle);
        copier.hover(function () {
            $(this).toggleClass("copier-hover");
        });
        copier.on('click',
            function () {
                copier.attr('title', ''); // keeps the popover from having a header.
                var obj = $('#jsonobjects').find('.sunlight-@codeeditorclass');
                copyTextToClipboard(obj.text());
                copier.attr('title', copierTitle);
            });
    });

</script>

